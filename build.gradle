#!/usr/bin/env gradle -b

import org.apache.tools.ant.taskdefs.condition.Os

group = "org.harfbuzz"
def archivesBaseName = "harfbuzz-js"

buildscript {
	repositories {
		mavenLocal()
		maven {
			credentials {
				username nexusUser
				password nexusPassword
			}
			url "https://artifactory.prezi.com/plugins-snapshot"
		}
	}

	dependencies {
		classpath "com.prezi.gradle:gradle-coffee-plugin:1.0-SNAPSHOT"
		classpath "com.prezi.gradle:gradle-prezi-plugin:1.0-SNAPSHOT"
		classpath "com.prezi.gradle:gradle-haxe-plugin:1.2-SNAPSHOT"
		classpath "com.prezi.spaghetti:gradle-spaghetti-plugin:1.0-SNAPSHOT"
		classpath "com.eriwen:gradle-js-plugin:1.1"
	}
}

apply plugin: "coffee"
apply plugin: "prezi"
apply plugin: "js"
apply plugin: "haxe"
apply plugin: "spaghetti"

// JS plugin adds mavenCentral() -- let's remove it
project.repositories.remove(project.repositories.findByName("MavenRepo"))

println "Version: ${version}"

repositories {
	mavenLocal()
	maven downloadRepo("repo")
}

configurations {
	emcc
	haxelibs
}

clean << {
	if (file("Makefile").exists()) {
		def proc = "make clean".execute()
		proc.waitForProcessOutput(System.out, System.err)
		if (proc.exitValue()) {
			throw new RuntimeException("Emscripten clean failed")
		}
	}
	delete file("config.h")
}

task cleanTools {
	doLast {
		delete file("tools")
	}
}

task downloadEmscripten {
	doLast {
		def commands = []
		if (!file("tools/emscripten").isDirectory()) {
			mkdir("tools/emscripten")
			commands.add("git clone https://github.com/lptr/emscripten.git .")
		} else {
			commands.add("git fetch --all")
		}
		commands.add("git checkout --force ${emscripten_version}")
		for (command in commands) {
			def proc = command.execute(null, file("tools/emscripten"))
			proc.waitForProcessOutput(System.out, System.err)
			if (proc.exitValue()) {
				throw new RuntimeException("Could not clone Emscripten")
			}
		}
	}
}

task installMocha(type:Exec) {
	commandLine "npm", "install", "mocha", "chai", "coffee-script"
}

task compileJsConnector(type: com.prezi.gradle.task.CompileCoffee) {
	srcDir = file("src/js-connector/")
	outputDir = file("${project.buildDir}/compiled-coffee")
}

task generateUcdnJs {
	def input = file("src/hb-ucdn/ucdn.h")
	def output = file("${project.buildDir}/ucdn.js")
	inputs.file input
	outputs.file output

	doLast {
		output.withWriter { writer ->
			input.withReader { reader ->
				while (true) {
					def line = reader.readLine()
					if (line == null) break
					def matches = line =~ /#define (UCDN_[A-Z0-9_]+) (\d+)/
					if (matches) {
						def name = matches[0][1]
						def value = matches[0][2]
						writer.println "Module[\"${name}\"] = ${value};"
					}
				}
			}
		}
	}
}

task combineJsConnector(type: com.eriwen.gradle.js.tasks.CombineJsTask) {
    dependsOn compileJsConnector
    dependsOn generateUcdnJs

    source new File(compileJsConnector.outputDir, "connector.js")
    source new File(compileJsConnector.outputDir, "hb-js.js")
    source generateUcdnJs.outputs

    dest = file("${buildDir}/post.js")
}

task configureHarfbuzz {
	inputs.file "configure.ac"
	outputs.file "config.h"
	dependsOn downloadEmscripten

	doLast {
		def commandLine = [ "tools/emscripten/emconfigure", "./autogen.sh" ]

		commandLine += "--with-glib=no"
		commandLine += "--with-gobject=no"
		commandLine += "--with-cairo=no"
		commandLine += "--with-icu=no"
		commandLine += "--with-graphite2=no"
		commandLine += "--with-freetype=no"
		commandLine += "--with-uniscribe=no"
		commandLine += "--with-coretext=no"

		// We need to do this to build shared libs
		commandLine += [ "--host", "i386-linux" ]

		def proc = commandLine.execute()
		proc.waitForProcessOutput(System.out, System.err)

		if (proc.exitValue()) {
			throw new RuntimeException("Emscripten configuration failed")
		}

		for (outputFile in outputs.getFiles()) {
			if (!outputFile.exists()) {
				throw new RuntimeException("Emscripten configuration didn't create required file: " + outputFile)
			}
		}
	}
}

task makeHarfbuzz() {
	dependsOn configureHarfbuzz

	doLast {
		def proc = [ "tools/emscripten/emmake", "make", "all-recursive" ].execute()
		proc.waitForProcessOutput(System.out, System.err)

		if (proc.exitValue()) {
			throw new RuntimeException("Emscripten build failed")
		}
	}
}

def EXPORTED_FUNCTIONS = [
	'_hb_language_from_string',
	'_hb_language_to_string',
	'_hb_unicode_funcs_get_default',
	'_hb_unicode_funcs_reference',
	'_hb_buffer_create',
	'_hb_buffer_reference',
	'_hb_buffer_destroy',
	'_hb_buffer_reset',
	'_hb_buffer_get_empty',
	'_hb_buffer_set_content_type',
	'_hb_buffer_get_content_type',
	'_hb_buffer_get_length',
	'_hb_buffer_get_glyph_infos',
	'_hb_buffer_get_glyph_positions',
	'_hb_buffer_normalize_glyphs',
	'_hb_buffer_add',
	'_hb_buffer_add_utf8',
	'_hb_buffer_add_utf16',
	'_hb_buffer_add_utf32',
	'_hb_buffer_get_length',
	'_hb_buffer_guess_segment_properties',
	'_hb_buffer_set_direction',
	'_hb_buffer_get_direction',
	'_hb_buffer_set_script',
	'_hb_buffer_get_script',
	'_hb_buffer_set_language',
	'_hb_buffer_get_language',
	'_hb_blob_create',
	'_hb_blob_create_sub_blob',
	'_hb_blob_get_empty',
	'_hb_blob_reference',
	'_hb_blob_destroy',
	'_hb_feature_from_string',
	'_hb_feature_to_string',
	'_hb_shape_list_shapers',
	'_hb_shape',
	'_hb_shape_full',
	'_hb_face_create',
	'_hb_face_destroy',
	'_hb_font_create',
	'_hb_font_destroy',
	'_hb_font_set_scale',
	'_hb_font_get_face',
	'_hb_font_funcs_create',
	'_hb_font_funcs_destroy',
	'_hb_font_set_funcs',
	'_hb_font_funcs_set_glyph_func',
	'_hb_font_funcs_set_glyph_h_advance_func',
	'_hb_font_funcs_set_glyph_v_advance_func',
	'_hb_font_funcs_set_glyph_h_origin_func',
	'_hb_font_funcs_set_glyph_v_origin_func',
	'_hb_font_funcs_set_glyph_h_kerning_func',
	'_hb_font_funcs_set_glyph_v_kerning_func',
	'_hb_font_funcs_set_glyph_extents_func',
	'_hb_font_funcs_set_glyph_contour_point_func',
	'_hb_font_funcs_set_glyph_name_func',
	'_hb_font_funcs_set_glyph_from_name_func',

	'_ucdn_get_unicode_version',
	'_ucdn_get_combining_class',
	'_ucdn_get_east_asian_width',
	'_ucdn_get_general_category',
	'_ucdn_get_bidi_class',
	'_ucdn_get_script',
	'_ucdn_get_mirrored',
	'_ucdn_mirror',
	'_ucdn_decompose',
	'_ucdn_compose',
]

def DEAD_FUNCTIONS = [
	'_mprotect',
]

class CompileEmcc extends DefaultTask {
    @InputFiles
    @SkipWhenEmpty
    FileCollection source = new org.gradle.api.internal.file.UnionFileCollection()

    @OutputFile
    File outputFile

	List<File> inputFiles = new ArrayList<File>()

	File postJs
	String type = ""
	List<String> exportedFunctions = new ArrayList<String>()
	List<String> deadFunctions = new ArrayList<String>()

	int optimizationLevel = 0
	boolean closure = false
	boolean allowMemoryGrowth = true
	int typedArraySupport = 2
	boolean debug = false
	boolean memoryInitFile = false
	boolean asmJs = false

    void source(paths)
    {
        source.add(project.files(paths))
    }

	@TaskAction
	void doCompile() {
		def emccPath = "tools/emscripten/emcc"

		def emccVersion = "${emccPath} --version | perl -pe 's/emcc \\(Emscripten GCC-like replacement\\) (\\d+(?:\\.\\d+)*) \\(commit ([0-9a-f]+)\\)/\$1-\$2/'".execute().text.split("\n")[0].trim()
		logger.info "Compiling with ${emccVersion}"

		def versionHeader = project.file("${project.buildDir}/version-header.js")
		versionHeader.delete()
		versionHeader.createNewFile()
		versionHeader << "Module['version'] = '${project.version}${type}';\n";
		versionHeader << "Module['emccVersion'] = '${emccVersion}';\n";

		def commandLine = emccPath
		commandLine += " " + source.files.join(" ")

		if (debug) commandLine += " -g"

		commandLine += " --pre-js " + versionHeader
		if (postJs != null) commandLine += " --post-js " + postJs

		commandLine += " -o " + outputFile

		commandLine += " -O" + optimizationLevel

		commandLine += " --closure " + (closure ? 1 : 0)

		commandLine += " --memory-init-file " + (memoryInitFile ? 1 : 0)

		commandLine += " -s ALLOW_MEMORY_GROWTH=" + (allowMemoryGrowth ? 1 : 0)

		commandLine += " -s USE_TYPED_ARRAYS=" + typedArraySupport

		commandLine += " -s ASM_JS=" + (asmJs ? 1 : 0)

		if (exportedFunctions != null && exportedFunctions.size() > 0) {
			commandLine += " -s EXPORTED_FUNCTIONS=['" + exportedFunctions.join("','") + "']";
		}

		if (deadFunctions != null && deadFunctions.size() > 0) {
			commandLine += " -s DEAD_FUNCTIONS=['" + deadFunctions.join("','") + "']";
		}

		logger.info("Executing: ${commandLine}")

		def proc = commandLine.execute()
		proc.waitForProcessOutput(System.out, System.err)

		if (proc.exitValue()) {
			throw new RuntimeException("Emscripten build failed")
		}
	}
}

task compileEmccProduction(type: CompileEmcc) {
	dependsOn combineJsConnector
	dependsOn makeHarfbuzz

	type = ""
	closure = true
	typedArraySupport = 2
}

task compileEmccProductionUntyped(type: CompileEmcc) {
	dependsOn combineJsConnector
	dependsOn makeHarfbuzz

	type = "-untyped"
	closure = true
	typedArraySupport = 0
}

task compileEmccDebug(type: CompileEmcc) {
	dependsOn combineJsConnector
	dependsOn makeHarfbuzz

	type = "-debug"
	debug = true
	closure = false
	typedArraySupport = 2
}

task compileEmccDebugUntyped(type: CompileEmcc) {
	dependsOn combineJsConnector
	dependsOn makeHarfbuzz

	type = "-untyped-debug"
	debug = true
	closure = false
	typedArraySupport = 0
}

tasks.withType(CompileEmcc) { task ->
	task.configure {
		source "src/.libs/libharfbuzz.so"
		source "src/hb-ucdn/.libs/libhb-ucdn.a"
		postJs = combineJsConnector.dest
		allowMemoryGrowth = true
		memoryInitFile = false
		asmJs = false
		optimizationLevel = 2
		exportedFunctions = EXPORTED_FUNCTIONS
		deadFunctions = DEAD_FUNCTIONS
		outputFile = file("${buildDir}/harfbuzz${type}.js")
	}
}

task combineJsForTest(type: com.eriwen.gradle.js.tasks.CombineJsTask) {
    dependsOn compileEmccDebug

	source file("test/js-connector/harfbuzz-test-pre.js")
	source compileEmccDebug.outputFile
	source file("test/js-connector/harfbuzz-test-post.js")

	dest = file("${buildDir}/harfbuzz-test.js");
}

task testJs(type:Exec) {
	dependsOn installMocha
	dependsOn combineJsForTest

	commandLine "node_modules/mocha/bin/mocha", "--compilers", "coffee:coffee-script", "-R", "spec",
		"test/js-connector/connectorTest.coffee",
		"test/js-connector/harfbuzzTest.coffee"
}

// Spaghetti module

dependencies {
	haxelibs group: "haxelib3", name: "hamcrest", version: "1.2.1"
	haxelibs group: "haxelib3", name: "mconsole", version: "1.4.0"
	haxelibs group: "haxelib3", name: "mcover", version: "2.0.3"
	haxelibs group: "haxelib3", name: "mlib", version: "2.0.2"
	haxelibs group: "haxelib3", name: "munit", version: "2.0.2"
	haxelibs group: "haxelib3", name: "tink_core", version: "1.0.0-alpha"
	haxelibs group: "haxelib3", name: "tink_macro", version: "0.0.0-alpha"
	haxelibs group: "haxelib3", name: "mockatoo", version: "2.1.0"
}

spaghetti {
	platform "haxe"
	definition "spaghetti/src/HarfBuzz.module"
}

task generateHeaders(type: com.prezi.spaghetti.gradle.GenerateModuleHeaders) {
}

def harfbuzzDirectory = file("$buildDir/spaghetti-harfbuzz")
task copyHarfBuzz(type: Copy) {
	def harfbuzzTask = compileEmccDebug

	from harfbuzzTask.outputs.files
	into harfbuzzDirectory
	rename { it.replace("-debug", "") }
}

task compileJavaScript(type: com.prezi.gradle.haxe.CompileHaxe) {
	dependsOn generateHeaders
	dependsOn copyHarfBuzz
	configuration configurations.haxelibs
	targetPlatform "js"
	source harfbuzzDirectory
	source "$buildDir/spaghetti/module-headers"
	source "spaghetti/src/common"
	source "spaghetti/src/js"
	flag "--no-traces"
	include "prezi.text.harfbuzz"
	include "prezi.text.otf"
}

task testJavaScript(type: com.prezi.gradle.haxe.MUnit) {
	test compileJavaScript
	source "spaghetti/test/common"
	source "spaghetti/test/js"
	embedAll "spaghetti/test-resources"
	flag "-D test"
}

task bundleModule(type: com.prezi.spaghetti.gradle.BundleModule) {
	dependsOn compileJavaScript
	dependsOn testJavaScript
	inputFile compileJavaScript.outputFile
}

task buildAll {
	dependsOn testJs
	dependsOn compileEmccProduction
	// dependsOn compileEmccProductionUntyped
	dependsOn compileEmccDebug
	// dependsOn compileEmccDebugUntyped
	dependsOn bundleModule
}

install {
	dependsOn buildAll
}

uploadArchives {
	dependsOn install
	repositories {
		ivy uploadRepo("prezi-client")
	}
}

artifacts {
	archives(compileEmccProduction.outputFile) {
		name archivesBaseName
		type "js"
	}
	// archives(compileEmccProductionUntyped.outputFile) {
	// 	name archivesBaseName
	// 	type "js"
	// 	classifier "untyped"
	// }
	archives(compileEmccDebug.outputFile) {
		name archivesBaseName
		type "js"
		classifier "debug"
	}
	// archives(compileEmccDebugUntyped.outputFile) {
	// 	name archivesBaseName
	// 	type "js"
	// 	classifier "untyped-debug"
	// }
	archives(bundleModule.outputFile) {
		builtBy bundleModule
	}
	modules(bundleModule.outputFile) {
		builtBy bundleModule
	}
}
