package prezi.text.otf;

import org.hamcrest.MatchersBase;

class PenTest extends MatchersBase
{
	private var pen:Pen;

	@Before
	public function setup()
	{
		this.pen = new Pen();
	}

	@Test
	public function testEmpty()
	{
		assertLocation(0, 0);
		assertStartPoint();
		assertCommands([]);
	}

	@Test
	public function testInitialMoveTo()
	{
		pen.moveTo({x: 10, y: 20});
		assertLocation(10, 20);
		assertStartPoint(10, 20);
		assertCommands([
			OtfConstants.COMMAND_MOVE_TO, 10, 20,
		]);
	}

	@Test
	public function testMoveToFollowedByLineTo()
	{
		pen.moveTo({x: 10, y: 20});
		pen.lineTo({x: 30, y: 40});
		assertLocation(30, 40);
		assertStartPoint(10, 20);
		assertCommands([
			OtfConstants.COMMAND_MOVE_TO, 10, 20,
			OtfConstants.COMMAND_LINE_TO, 30, 40,
		]);
	}

	@Test
	public function testMoveToFollowedByRLineTo()
	{
		pen.moveTo({x: 10, y: 20});
		pen.rLineTo({x: 30, y: 40});
		assertLocation(40, 60);
		assertStartPoint(10, 20);
		assertCommands([
			OtfConstants.COMMAND_MOVE_TO, 10, 20,
			OtfConstants.COMMAND_LINE_TO, 40, 60,
		]);
	}

	@Test
	public function testLineToOnly()
	{
		pen.lineTo({x: 30, y: 40});
		assertLocation(30, 40);
		assertStartPoint(0, 0);
		assertCommands([
			OtfConstants.COMMAND_MOVE_TO, 0, 0,
			OtfConstants.COMMAND_LINE_TO, 30, 40,
		]);
	}

	@Test
	public function testLineTo()
	{
		pen.moveTo({x: 10, y: 20});
		pen.lineTo({x: 30, y: 40});
		assertLocation(30, 40);
		assertStartPoint(10, 20);
		assertCommands([
			OtfConstants.COMMAND_MOVE_TO, 10, 20,
			OtfConstants.COMMAND_LINE_TO, 30, 40,
		]);
	}

	@Test
	public function testRLineTo()
	{
		pen.moveTo({x: 10, y: 20});
		pen.rLineTo({x: 30, y: 40});
		assertLocation(40, 60);
		assertStartPoint(10, 20);
		assertCommands([
			OtfConstants.COMMAND_MOVE_TO, 10, 20,
			OtfConstants.COMMAND_LINE_TO, 40, 60,
		]);
	}


	@Test
	public function testCurveTo()
	{
		pen.moveTo({x: 10, y: 20});
		pen.curveTo({x: 10, y: 20}, {x: 30, y: 40});
		assertLocation(30, 40);
		assertStartPoint(10, 20);
		assertCommands([
			OtfConstants.COMMAND_MOVE_TO, 10, 20,
			OtfConstants.COMMAND_CURVE_TO, 10, 20, 30, 40,
		]);
	}

	@Test
	public function testRCurveTo()
	{
		pen.moveTo({x: 10, y: 20});
		pen.rCurveTo({x: 10, y: 20}, {x: 30, y: 40});
		assertLocation(50, 80);
		assertStartPoint(10, 20);
		assertCommands([
			OtfConstants.COMMAND_MOVE_TO, 10, 20,
			OtfConstants.COMMAND_CURVE_TO, 20, 40, 50, 80,
		]);
	}


	@Test
	public function testCubicCurveTo()
	{
		pen.moveTo({x: 10, y: 20});
		pen.cubicCurveTo({x: 10, y: 20}, {x: 30, y: 40}, {x: 20, y: 10});
		assertLocation(20, 10);
		assertStartPoint(10, 20);
		assertCommands([
			OtfConstants.COMMAND_MOVE_TO, 10, 20,
			OtfConstants.COMMAND_CUBIC_CURVE_TO, 10, 20, 30, 40, 20, 10,
		]);
	}

	@Test
	public function testRCubicCurveTo()
	{
		pen.moveTo({x: 10, y: 20});
		pen.rCubicCurveTo({x: 10, y: 20}, {x: 30, y: 40}, {x: 20, y: 10});
		assertLocation(70, 90);
		assertStartPoint(10, 20);
		assertCommands([
			OtfConstants.COMMAND_MOVE_TO, 10, 20,
			OtfConstants.COMMAND_CUBIC_CURVE_TO, 20, 40, 50, 80, 70, 90,
		]);
	}


	private function assertLocation(x:Int, y:Int)
	{
		assertThat("location.x", pen.location.x, is(x));
		assertThat("location.y", pen.location.y, is(y));
	}

	private function assertStartPoint(?x:Int, ?y:Int)
	{
		if (x == null && y == null)
		{
			assertThat("startPoint", pen.startPoint, is(null));
		}
		else
		{
			assertThat("startPoint.x", pen.startPoint.x, is(x));
			assertThat("startPoint.y", pen.startPoint.y, is(y));
		}
	}

	private function assertCommands(commands:Array<Int>)
	{
		assertThat("commands", pen.commands, is(commands));
	}
}
